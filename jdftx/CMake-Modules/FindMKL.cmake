if(NOT MKL_PATH)
	message(FATAL_ERROR "Please specify the root path to MKL in variable MKL_PATH")
endif()

if(CMAKE_SIZEOF_VOID_P EQUAL 8) #64-bit
	set(MKL_LIB_PATH ${MKL_PATH}/lib/intel64)
	find_library(MKL_INTERFACE_LIBRARY NAMES mkl_intel_lp64 PATHS ${MKL_LIB_PATH})
else() #32-bit
	set(MKL_LIB_PATH ${MKL_PATH}/lib/ia32)
	find_library(MKL_INTERFACE_LIBRARY NAMES mkl_intel PATHS ${MKL_LIB_PATH})
endif()

find_library(MKL_SEQUENTIAL_LIBRARY NAMES mkl_sequential PATHS ${MKL_LIB_PATH})
find_library(MKL_CORE_LIBRARY NAMES mkl_core PATHS ${MKL_LIB_PATH})
find_path(FFTW3_INCLUDE_DIR NAMES fftw3_mkl.h PATHS ${MKL_PATH}/include/fftw)
find_path(MKL_INCLUDE_DIR NAMES mkl_dfti.h PATHS ${MKL_PATH}/include)


if(MKL_INTERFACE_LIBRARY AND MKL_SEQUENTIAL_LIBRARY AND MKL_CORE_LIBRARY AND FFTW3_INCLUDE_DIR AND MKL_INCLUDE_DIR)
	set(MKL_FOUND TRUE)
	set(MKL_LIBRARIES ${MKL_INTERFACE_LIBRARY} ${MKL_SEQUENTIAL_LIBRARY} ${MKL_CORE_LIBRARY} pthread)
else()
	set(MKL_FOUND FALSE)
endif()


if(MKL_FOUND)
	if(NOT MKL_FIND_QUIETLY)
		message(STATUS "Found MKL: ${MKL_LIBRARIES}")
	endif()
else()
	if(MKL_FIND_REQUIRED)
		if(NOT MKL_INTERFACE_LIBRARY)
			message(FATAL_ERROR "Could not find the MKL interface-layer library")
		endif()
		if(NOT MKL_SEQUENTIAL_LIBRARY)
			message(FATAL_ERROR "Could not find the MKL sequential thread-layer library")
		endif()
		if(NOT MKL_CORE_LIBRARY)
			message(FATAL_ERROR "Could not find the MKL core library")
		endif()
		if(NOT FFTW3_INCLUDE_DIR)
			message(FATAL_ERROR "Could not find the MKL FFTW3 interface library")
		endif()
		if(NOT MKL_INCLUDE_DIR)
			message(FATAL_ERROR "Could not find the MKL headers")
		endif()
	endif()
endif()
