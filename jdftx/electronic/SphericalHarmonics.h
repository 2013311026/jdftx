/*-------------------------------------------------------------------
Copyright 2012 Ravishankar Sundararaman

This file is part of JDFTx.

JDFTx is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

JDFTx is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with JDFTx.  If not, see <http://www.gnu.org/licenses/>.
-------------------------------------------------------------------*/

#ifndef JDFTX_ELECTRONIC_SPHERICALHARMONICS_H
#define JDFTX_ELECTRONIC_SPHERICALHARMONICS_H

#include <core/vector3.h>

//! Spherical bessel function
inline double bessel_jl(int l, double x)
{	double xInv=1./x, xInvSq = xInv * xInv;
	if(fabs(x) > 1.+0.1*l)
	{	double s, c; sincos(x, &s, &c);
		switch(l)
		{	case 0: return xInv * s;
			case 1: return xInv * (xInv*s - c);
			case 2: return xInv * ((3*xInvSq-1)*s - 3*xInv*c);
			case 3: return xInv * ((15*xInvSq-6)*xInv*s + (1-15*xInvSq)*c);
			case 4: return xInv * ((1+xInvSq*(-45+xInvSq*105))*s + xInv*(10-105*xInvSq)*c);
			case 5: return xInv * (xInv*(15+xInvSq*(-420+xInvSq*945))*s + (-1+xInvSq*(105-945*xInvSq))*c);
			case 6: return xInv * ((-1+xInvSq*(210+xInvSq*(-4725 + 10395*xInvSq)))*s + xInv*(-21+xInvSq*(1260 - 10395*xInvSq))*c);
			default: return 0.; //unsupported l
		}
	}
	else //Series expansions about 0 to prevent roundoff errors (accurate to 1 in 1e15 at the crossover for each l)
	{	double term = 1.;
		for(int i=3; i<=2*l+1; i+=2)
			term *= x/i;
		double ret = term;
		double xSq = x*x;
		for(int i=2; i<=14; i+=2)
		{	term *= -xSq/(i*(i+2*l+1));
			ret += term;
		}
		return ret;
	}
}


//! Auto-generated code for computing real spherical harmonics and their products
//! The external interface  to these functions is at the bottom of this file
namespace YlmInternal
{
	#define Power pow //For code auto-generated by Mathematica

	template<int l, int m> __hostanddev__ double Ylm(double x, double y, double z);
	#define DECLARE_Ylm(l,m,code) \
		template<> __hostanddev__ double Ylm<l,m>(double x, double y, double z) { return code; }

	DECLARE_Ylm(0,0, 0.28209479177387814)
	DECLARE_Ylm(1,-1, 0.4886025119029199*y)
	DECLARE_Ylm(1,0, 0.4886025119029199*z)
	DECLARE_Ylm(1,1, 0.4886025119029199*x)
	DECLARE_Ylm(2,-2, 1.0925484305920792*x*y)
	DECLARE_Ylm(2,-1, 1.0925484305920792*y*z)
	DECLARE_Ylm(2,0, -0.31539156525252005*(Power(x,2) + Power(y,2) - 2.*Power(z,2)))
	DECLARE_Ylm(2,1, 1.0925484305920792*x*z)
	DECLARE_Ylm(2,2, 0.5462742152960396*(x - y)*(x + y))
	DECLARE_Ylm(3,-3, -0.5900435899266435*y*(-3.*Power(x,2) + Power(y,2)))
	DECLARE_Ylm(3,-2, 2.890611442640554*x*y*z)
	DECLARE_Ylm(3,-1, -0.4570457994644658*y*(Power(x,2) + Power(y,2) - 4.*Power(z,2)))
	DECLARE_Ylm(3,0, 0.3731763325901154*z*(-3.*(Power(x,2) + Power(y,2)) + 2.*Power(z,2)))
	DECLARE_Ylm(3,1, -0.4570457994644658*x*(Power(x,2) + Power(y,2) - 4.*Power(z,2)))
	DECLARE_Ylm(3,2, 1.445305721320277*(x - y)*(x + y)*z)
	DECLARE_Ylm(3,3, 0.5900435899266435*x*(Power(x,2) - 3.*Power(y,2)))
	#undef DECLARE_Ylm

	template<int l1, int m1, int l2, int m2, int l> __hostanddev__ double YlmProd(double x, double y, double z);
	#define DECLARE_YlmProd(l1,m1, l2,m2, l, code) \
		template<> __hostanddev__ double YlmProd<l1,m1, l2,m2, l>(double x, double y, double z) { return code; }
	DECLARE_YlmProd(0,0, 0,0, 0, 0.07957747154594767)
	DECLARE_YlmProd(1,-1, 0,0, 1, 0.13783222385544802*y)
	DECLARE_YlmProd(1,-1, 1,-1, 0, 0.07957747154594767)
	DECLARE_YlmProd(1,-1, 1,-1, 2, -0.07957747154594767*(Power(x,2) - 2.*Power(y,2) + Power(z,2)))
	DECLARE_YlmProd(1,0, 0,0, 1, 0.13783222385544802*z)
	DECLARE_YlmProd(1,0, 1,-1, 2, 0.238732414637843*y*z)
	DECLARE_YlmProd(1,0, 1,0, 0, 0.07957747154594767)
	DECLARE_YlmProd(1,0, 1,0, 2, -0.07957747154594767*(Power(x,2) + Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(1,1, 0,0, 1, 0.13783222385544802*x)
	DECLARE_YlmProd(1,1, 1,-1, 2, 0.238732414637843*x*y)
	DECLARE_YlmProd(1,1, 1,0, 2, 0.238732414637843*x*z)
	DECLARE_YlmProd(1,1, 1,1, 0, 0.07957747154594767)
	DECLARE_YlmProd(1,1, 1,1, 2, 0.07957747154594767*(2.*Power(x,2) - Power(y,2) - Power(z,2)))
	DECLARE_YlmProd(2,-2, 0,0, 2, 0.30820222203074993*x*y)
	DECLARE_YlmProd(2,-2, 1,-1, 1, 0.10676438151257657*x)
	DECLARE_YlmProd(2,-2, 1,-1, 3, -0.10676438151257657*x*(Power(x,2) - 4.*Power(y,2) + Power(z,2)))
	DECLARE_YlmProd(2,-2, 1,0, 3, 0.5338219075628828*x*y*z)
	DECLARE_YlmProd(2,-2, 1,1, 1, 0.10676438151257657*y)
	DECLARE_YlmProd(2,-2, 1,1, 3, -0.10676438151257657*y*(-4.*Power(x,2) + Power(y,2) + Power(z,2)))
	DECLARE_YlmProd(2,-2, 2,-2, 0, 0.07957747154594767)
	DECLARE_YlmProd(2,-2, 2,-2, 2, 0.056841051104248336*(Power(x,2) + Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(2,-2, 2,-2, 4, -0.034104630662549*(4.*Power(x,4) - 27.*Power(x,2)*Power(y,2) + 4.*Power(y,4) + 3.*Power(x,2)*Power(z,2) + 3.*Power(y,2)*Power(z,2) - Power(z,4)))
	DECLARE_YlmProd(2,-1, 0,0, 2, 0.30820222203074993*y*z)
	DECLARE_YlmProd(2,-1, 1,-1, 1, 0.10676438151257657*z)
	DECLARE_YlmProd(2,-1, 1,-1, 3, -0.10676438151257657*z*(Power(x,2) - 4.*Power(y,2) + Power(z,2)))
	DECLARE_YlmProd(2,-1, 1,0, 1, 0.10676438151257657*y)
	DECLARE_YlmProd(2,-1, 1,0, 3, -0.10676438151257657*y*(Power(x,2) + Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(2,-1, 1,1, 3, 0.5338219075628828*x*y*z)
	DECLARE_YlmProd(2,-1, 2,-2, 2, 0.170523153312745*x*z)
	DECLARE_YlmProd(2,-1, 2,-2, 4, -0.170523153312745*x*z*(Power(x,2) - 6.*Power(y,2) + Power(z,2)))
	DECLARE_YlmProd(2,-1, 2,-1, 0, 0.07957747154594767)
	DECLARE_YlmProd(2,-1, 2,-1, 2, -0.056841051104248336*(2.*Power(x,2) - Power(y,2) - Power(z,2)))
	DECLARE_YlmProd(2,-1, 2,-1, 4, 0.034104630662549*(Power(x,4) - 3.*Power(x,2)*Power(y,2) - 4.*Power(y,4) - 3.*Power(x,2)*Power(z,2) + 27.*Power(y,2)*Power(z,2) - 4.*Power(z,4)))
	DECLARE_YlmProd(2,0, 0,0, 2, -0.08897031792714714*(Power(x,2) + Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(2,0, 1,-1, 1, -0.061640444406149984*y)
	DECLARE_YlmProd(2,0, 1,-1, 3, -0.09246066660922497*y*(Power(x,2) + Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(2,0, 1,0, 1, 0.12328088881229997*z)
	DECLARE_YlmProd(2,0, 1,0, 3, 0.09246066660922497*z*(-3.*Power(x,2) - 3.*Power(y,2) + 2.*Power(z,2)))
	DECLARE_YlmProd(2,0, 1,1, 1, -0.061640444406149984*x)
	DECLARE_YlmProd(2,0, 1,1, 3, -0.09246066660922497*x*(Power(x,2) + Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(2,0, 2,-2, 2, -0.1969031769363543*x*y)
	DECLARE_YlmProd(2,0, 2,-2, 4, -0.1476773827022657*x*y*(Power(x,2) + Power(y,2) - 6.*Power(z,2)))
	DECLARE_YlmProd(2,0, 2,-1, 2, 0.09845158846817716*y*z)
	DECLARE_YlmProd(2,0, 2,-1, 4, -0.1476773827022657*y*z*(3.*Power(x,2) + 3.*Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(2,0, 2,0, 0, 0.07957747154594767)
	DECLARE_YlmProd(2,0, 2,0, 2, -0.056841051104248336*(Power(x,2) + Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(2,0, 2,0, 4, 0.025578472996911752*(3.*Power(x,4) + 6.*Power(x,2)*Power(y,2) + 3.*Power(y,4) - 24.*Power(x,2)*Power(z,2) - 24.*Power(y,2)*Power(z,2) + 8.*Power(z,4)))
	DECLARE_YlmProd(2,1, 0,0, 2, 0.30820222203074993*x*z)
	DECLARE_YlmProd(2,1, 1,-1, 3, 0.5338219075628828*x*y*z)
	DECLARE_YlmProd(2,1, 1,0, 1, 0.10676438151257657*x)
	DECLARE_YlmProd(2,1, 1,0, 3, -0.10676438151257657*x*(Power(x,2) + Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(2,1, 1,1, 1, 0.10676438151257657*z)
	DECLARE_YlmProd(2,1, 1,1, 3, -0.10676438151257657*z*(-4.*Power(x,2) + Power(y,2) + Power(z,2)))
	DECLARE_YlmProd(2,1, 2,-2, 2, 0.170523153312745*y*z)
	DECLARE_YlmProd(2,1, 2,-2, 4, -0.170523153312745*y*z*(-6.*Power(x,2) + Power(y,2) + Power(z,2)))
	DECLARE_YlmProd(2,1, 2,-1, 2, 0.170523153312745*x*y)
	DECLARE_YlmProd(2,1, 2,-1, 4, -0.170523153312745*x*y*(Power(x,2) + Power(y,2) - 6.*Power(z,2)))
	DECLARE_YlmProd(2,1, 2,0, 2, 0.09845158846817716*x*z)
	DECLARE_YlmProd(2,1, 2,0, 4, -0.1476773827022657*x*z*(3.*Power(x,2) + 3.*Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(2,1, 2,1, 0, 0.07957747154594767)
	DECLARE_YlmProd(2,1, 2,1, 2, 0.056841051104248336*(Power(x,2) - 2.*Power(y,2) + Power(z,2)))
	DECLARE_YlmProd(2,1, 2,1, 4, -0.034104630662549*(4.*Power(x,4) + 3.*Power(x,2)*Power(y,2) - Power(y,4) - 27.*Power(x,2)*Power(z,2) + 3.*Power(y,2)*Power(z,2) + 4.*Power(z,4)))
	DECLARE_YlmProd(2,2, 0,0, 2, 0.15410111101537496*(x - y)*(x + y))
	DECLARE_YlmProd(2,2, 1,-1, 1, -0.10676438151257657*y)
	DECLARE_YlmProd(2,2, 1,-1, 3, -0.053382190756288285*y*(-7.*Power(x,2) + 3.*Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(2,2, 1,0, 3, 0.2669109537814414*(x - y)*(x + y)*z)
	DECLARE_YlmProd(2,2, 1,1, 1, 0.10676438151257657*x)
	DECLARE_YlmProd(2,2, 1,1, 3, 0.053382190756288285*x*(3.*Power(x,2) - 7.*Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(2,2, 2,-2, 4, 0.5968310365946076*x*(x - y)*y*(x + y))
	DECLARE_YlmProd(2,2, 2,-1, 2, -0.170523153312745*y*z)
	DECLARE_YlmProd(2,2, 2,-1, 4, -0.0852615766563725*y*z*(-9.*Power(x,2) + 5.*Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(2,2, 2,0, 2, -0.09845158846817716*(x - y)*(x + y))
	DECLARE_YlmProd(2,2, 2,0, 4, -0.07383869135113286*(x - y)*(x + y)*(Power(x,2) + Power(y,2) - 6.*Power(z,2)))
	DECLARE_YlmProd(2,2, 2,1, 2, 0.170523153312745*x*z)
	DECLARE_YlmProd(2,2, 2,1, 4, 0.0852615766563725*x*z*(5.*Power(x,2) - 9.*Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(2,2, 2,2, 0, 0.07957747154594767)
	DECLARE_YlmProd(2,2, 2,2, 2, 0.056841051104248336*(Power(x,2) + Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(2,2, 2,2, 4, 0.00852615766563725*(19.*Power(x,4) - 102.*Power(x,2)*Power(y,2) + 19.*Power(y,4) - 12.*Power(x,2)*Power(z,2) - 12.*Power(y,2)*Power(z,2) + 4.*Power(z,4)))
	DECLARE_YlmProd(3,-3, 0,0, 3, -0.16644822363786807*y*(-3.*Power(x,2) + Power(y,2)))
	DECLARE_YlmProd(3,-3, 1,-1, 2, 0.12355576293016048*(x - y)*(x + y))
	DECLARE_YlmProd(3,-3, 1,-1, 4, -0.041185254310053494*(3.*Power(x,4) - 21.*Power(x,2)*Power(y,2) + 4.*Power(y,4) + 3.*Power(x,2)*Power(z,2) - 3.*Power(y,2)*Power(z,2)))
	DECLARE_YlmProd(3,-3, 1,0, 4, -0.28829678017037447*y*(-3.*Power(x,2) + Power(y,2))*z)
	DECLARE_YlmProd(3,-3, 1,1, 2, 0.24711152586032095*x*y)
	DECLARE_YlmProd(3,-3, 1,1, 4, 0.041185254310053494*x*y*(15.*Power(x,2) - 13.*Power(y,2) - 6.*Power(z,2)))
	DECLARE_YlmProd(3,-3, 2,-2, 1, 0.11051163396947497*x)
	DECLARE_YlmProd(3,-3, 2,-2, 3, 0.04297674654368472*x*(Power(x,2) + Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,-3, 2,-2, 5, -0.030697676102631938*x*(5.*Power(x,4) - 53.*Power(x,2)*Power(y,2) + 26.*Power(y,4) + 3.*Power(x,2)*Power(z,2) + 3.*Power(y,2)*Power(z,2) - 2.*Power(z,4)))
	DECLARE_YlmProd(3,-3, 2,-1, 3, 0.2148837327184236*(x - y)*(x + y)*z)
	DECLARE_YlmProd(3,-3, 2,-1, 5, -0.2148837327184236*z*(Power(x,4) - 9.*Power(x,2)*Power(y,2) + 2.*Power(y,4) + Power(x,2)*Power(z,2) - Power(y,2)*Power(z,2)))
	DECLARE_YlmProd(3,-3, 2,0, 3, 0.12406318092945343*y*(-3.*Power(x,2) + Power(y,2)))
	DECLARE_YlmProd(3,-3, 2,0, 5, 0.06203159046472671*y*(-3.*Power(x,2) + Power(y,2))*(Power(x,2) + Power(y,2) - 8.*Power(z,2)))
	DECLARE_YlmProd(3,-3, 2,1, 3, 0.4297674654368472*x*y*z)
	DECLARE_YlmProd(3,-3, 2,1, 5, 0.2148837327184236*x*y*z*(7.*Power(x,2) - 5.*Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(3,-3, 2,2, 1, 0.11051163396947497*y)
	DECLARE_YlmProd(3,-3, 2,2, 3, 0.04297674654368472*y*(Power(x,2) + Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,-3, 2,2, 5, 0.015348838051315969*y*(53.*Power(x,4) - 104.*Power(x,2)*Power(y,2) + 11.*Power(y,4) - 6.*Power(x,2)*Power(z,2) - 6.*Power(y,2)*Power(z,2) + 4.*Power(z,4)))
	DECLARE_YlmProd(3,-3, 3,-3, 0, 0.07957747154594767)
	DECLARE_YlmProd(3,-3, 3,-3, 2, 0.06631455962162307*(Power(x,2) + Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(3,-3, 3,-3, 4, 0.008138605044471921*(3.*Power(x,4) + 6.*Power(x,2)*Power(y,2) + 3.*Power(y,4) - 24.*Power(x,2)*Power(z,2) - 24.*Power(y,2)*Power(z,2) + 8.*Power(z,4)))
	DECLARE_YlmProd(3,-3, 3,-3, 6, -0.001507149082309615*(113.*Power(x,6) - 1740.*Power(x,4)*Power(y,2) + 1725.*Power(x,2)*Power(y,4) - 118.*Power(y,6) + 45.*Power(x,4)*Power(z,2) + 90.*Power(x,2)*Power(y,2)*Power(z,2) + 45.*Power(y,4)*Power(z,2) - 60.*Power(x,2)*Power(z,4) - 60.*Power(y,2)*Power(z,4) + 8.*Power(z,6)))
	DECLARE_YlmProd(3,-2, 0,0, 3, 0.8154264330108766*x*y*z)
	DECLARE_YlmProd(3,-2, 1,-1, 2, 0.20176571597278542*x*z)
	DECLARE_YlmProd(3,-2, 1,-1, 4, -0.20176571597278542*x*z*(Power(x,2) - 6.*Power(y,2) + Power(z,2)))
	DECLARE_YlmProd(3,-2, 1,0, 2, 0.20176571597278542*x*y)
	DECLARE_YlmProd(3,-2, 1,0, 4, -0.20176571597278542*x*y*(Power(x,2) + Power(y,2) - 6.*Power(z,2)))
	DECLARE_YlmProd(3,-2, 1,1, 2, 0.20176571597278542*y*z)
	DECLARE_YlmProd(3,-2, 1,1, 4, -0.20176571597278542*y*z*(-6.*Power(x,2) + Power(y,2) + Power(z,2)))
	DECLARE_YlmProd(3,-2, 2,-2, 1, 0.09023237128881265*z)
	DECLARE_YlmProd(3,-2, 2,-2, 3, -0.07018073322463207*z*(-3.*Power(x,2) - 3.*Power(y,2) + 2.*Power(z,2)))
	DECLARE_YlmProd(3,-2, 2,-2, 5, 0.05012909516045148*z*(-6.*Power(x,4) + 51.*Power(x,2)*Power(y,2) - 6.*Power(y,4) - 5.*Power(x,2)*Power(z,2) - 5.*Power(y,2)*Power(z,2) + Power(z,4)))
	DECLARE_YlmProd(3,-2, 2,-1, 1, 0.09023237128881265*x)
	DECLARE_YlmProd(3,-2, 2,-1, 3, -0.07018073322463207*x*(2.*Power(x,2) - 3.*Power(y,2) - 3.*Power(z,2)))
	DECLARE_YlmProd(3,-2, 2,-1, 5, 0.05012909516045148*x*(Power(x,4) - 5.*Power(x,2)*Power(y,2) - 6.*Power(y,4) - 5.*Power(x,2)*Power(z,2) + 51.*Power(y,2)*Power(z,2) - 6.*Power(z,4)))
	DECLARE_YlmProd(3,-2, 2,0, 5, -0.9116744674312492*x*y*z*(Power(x,2) + Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(3,-2, 2,1, 1, 0.09023237128881265*y)
	DECLARE_YlmProd(3,-2, 2,1, 3, -0.07018073322463207*y*(-3.*Power(x,2) + 2.*Power(y,2) - 3.*Power(z,2)))
	DECLARE_YlmProd(3,-2, 2,1, 5, 0.05012909516045148*y*(-6.*Power(x,4) - 5.*Power(x,2)*Power(y,2) + Power(y,4) + 51.*Power(x,2)*Power(z,2) - 5.*Power(y,2)*Power(z,2) - 6.*Power(z,4)))
	DECLARE_YlmProd(3,-2, 2,2, 5, 1.5790664975542215*x*(x - y)*y*(x + y)*z)
	DECLARE_YlmProd(3,-2, 3,-3, 2, 0.16243683359034922*x*z)
	DECLARE_YlmProd(3,-2, 3,-3, 4, 0.06645143192332467*x*z*(3.*Power(x,2) + 3.*Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,-2, 3,-3, 6, -0.051684447051474756*x*z*(7.*Power(x,4) - 85.*Power(x,2)*Power(y,2) + 40.*Power(y,4) + 5.*Power(x,2)*Power(z,2) + 5.*Power(y,2)*Power(z,2) - 2.*Power(z,4)))
	DECLARE_YlmProd(3,-2, 3,-2, 0, 0.07957747154594767)
	DECLARE_YlmProd(3,-2, 3,-2, 4, -0.1519206274968092*(Power(x,4) - 3.*Power(x,2)*Power(y,2) + Power(y,4) - 3.*Power(x,2)*Power(z,2) - 3.*Power(y,2)*Power(z,2) + Power(z,4)))
	DECLARE_YlmProd(3,-2, 3,-2, 6, 0.03617157797543076*(2.*Power(x,6) - 15.*Power(x,4)*Power(y,2) - 15.*Power(x,2)*Power(y,4) + 2.*Power(y,6) - 15.*Power(x,4)*Power(z,2) + 180.*Power(x,2)*Power(y,2)*Power(z,2) - 15.*Power(y,4)*Power(z,2) - 15.*Power(x,2)*Power(z,4) - 15.*Power(y,2)*Power(z,4) + 2.*Power(z,6)))
	DECLARE_YlmProd(3,-1, 0,0, 3, -0.12893023963105413*y*(Power(x,2) + Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,-1, 1,-1, 2, -0.03190196081043088*(Power(x,2) + 3.*Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,-1, 1,-1, 4, 0.03190196081043088*(Power(x,4) - 3.*Power(x,2)*Power(y,2) - 4.*Power(y,4) - 3.*Power(x,2)*Power(z,2) + 27.*Power(y,2)*Power(z,2) - 4.*Power(z,4)))
	DECLARE_YlmProd(3,-1, 1,0, 2, 0.25521568648344706*y*z)
	DECLARE_YlmProd(3,-1, 1,0, 4, -0.15950980405215442*y*z*(3.*Power(x,2) + 3.*Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,-1, 1,1, 2, -0.06380392162086176*x*y)
	DECLARE_YlmProd(3,-1, 1,1, 4, -0.15950980405215442*x*y*(Power(x,2) + Power(y,2) - 6.*Power(z,2)))
	DECLARE_YlmProd(3,-1, 2,-2, 1, -0.028533981195063098*x)
	DECLARE_YlmProd(3,-1, 2,-2, 3, -0.011096548242524536*x*(Power(x,2) + 21.*Power(y,2) - 24.*Power(z,2)))
	DECLARE_YlmProd(3,-1, 2,-2, 5, 0.03963052943758763*x*(Power(x,4) - 5.*Power(x,2)*Power(y,2) - 6.*Power(y,4) - 5.*Power(x,2)*Power(z,2) + 51.*Power(y,2)*Power(z,2) - 6.*Power(z,4)))
	DECLARE_YlmProd(3,-1, 2,-1, 1, 0.11413592478025239*z)
	DECLARE_YlmProd(3,-1, 2,-1, 3, 0.011096548242524536*z*(-21.*Power(x,2) + 9.*Power(y,2) + 4.*Power(z,2)))
	DECLARE_YlmProd(3,-1, 2,-1, 5, -0.03963052943758763*z*(-3.*Power(x,4) + 15.*Power(x,2)*Power(y,2) + 18.*Power(y,4) + Power(x,2)*Power(z,2) - 41.*Power(y,2)*Power(z,2) + 4.*Power(z,4)))
	DECLARE_YlmProd(3,-1, 2,0, 1, 0.09884461034412836*y)
	DECLARE_YlmProd(3,-1, 2,0, 3, -0.0576593560340749*y*(Power(x,2) + Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,-1, 2,0, 5, 0.10296313577513373*y*(Power(x,4) + 2.*Power(x,2)*Power(y,2) + Power(y,4) - 12.*Power(x,2)*Power(z,2) - 12.*Power(y,2)*Power(z,2) + 8.*Power(z,4)))
	DECLARE_YlmProd(3,-1, 2,1, 3, 0.33289644727573614*x*y*z)
	DECLARE_YlmProd(3,-1, 2,1, 5, -0.8322411181893403*x*y*z*(Power(x,2) + Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(3,-1, 2,2, 1, 0.028533981195063098*y)
	DECLARE_YlmProd(3,-1, 2,2, 3, 0.011096548242524536*y*(-9.*Power(x,2) + 11.*Power(y,2) - 24.*Power(z,2)))
	DECLARE_YlmProd(3,-1, 2,2, 5, 0.019815264718793815*y*(-9.*Power(x,4) - 4.*Power(x,2)*Power(y,2) + 5.*Power(y,4) + 66.*Power(x,2)*Power(z,2) - 46.*Power(y,2)*Power(z,2) + 12.*Power(z,4)))
	DECLARE_YlmProd(3,-1, 3,-3, 2, -0.05136703700512499*(x - y)*(x + y))
	DECLARE_YlmProd(3,-1, 3,-3, 4, 0.010506893932866475*(Power(x,4) - 42.*Power(x,2)*Power(y,2) + 13.*Power(y,4) + 36.*Power(x,2)*Power(z,2) - 36.*Power(y,2)*Power(z,2)))
	DECLARE_YlmProd(3,-1, 3,-3, 6, 0.040860143072258506*(Power(x,6) - 8.*Power(x,4)*Power(y,2) - 7.*Power(x,2)*Power(y,4) + 2.*Power(y,6) - 7.*Power(x,4)*Power(z,2) + 90.*Power(x,2)*Power(y,2)*Power(z,2) - 23.*Power(y,4)*Power(z,2) - 8.*Power(x,2)*Power(z,4) + 8.*Power(y,2)*Power(z,4)))
	DECLARE_YlmProd(3,-1, 3,-2, 2, 0.1258230302612176*x*z)
	DECLARE_YlmProd(3,-1, 3,-2, 4, -0.01715768594471149*x*z*(19.*Power(x,2) - 9.*Power(y,2) - 16.*Power(z,2)))
	DECLARE_YlmProd(3,-1, 3,-2, 6, 0.2001730026883007*x*z*(Power(x,4) - 7.*Power(x,2)*Power(y,2) - 8.*Power(y,4) - Power(x,2)*Power(z,2) + 23.*Power(y,2)*Power(z,2) - 2.*Power(z,4)))
	DECLARE_YlmProd(3,-1, 3,-1, 0, 0.07957747154594767)
	DECLARE_YlmProd(3,-1, 3,-1, 2, -0.039788735772973836*(3.*Power(x,2) - Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(3,-1, 3,-1, 4, 0.002712868348157307*(23.*Power(x,4) + 6.*Power(x,2)*Power(y,2) - 17.*Power(y,4) - 144.*Power(x,2)*Power(z,2) + 96.*Power(y,2)*Power(z,2) + 8.*Power(z,4)))
	DECLARE_YlmProd(3,-1, 3,-1, 6, -0.022607236234644227*(Power(x,6) - 4.*Power(x,4)*Power(y,2) - 11.*Power(x,2)*Power(y,4) - 6.*Power(y,6) - 11.*Power(x,4)*Power(z,2) + 90.*Power(x,2)*Power(y,2)*Power(z,2) + 101.*Power(y,4)*Power(z,2) - 4.*Power(x,2)*Power(z,4) - 116.*Power(y,2)*Power(z,4) + 8.*Power(z,6)))
	DECLARE_YlmProd(3,0, 0,0, 3, 0.10527109983694811*z*(-3.*Power(x,2) - 3.*Power(y,2) + 2.*Power(z,2)))
	DECLARE_YlmProd(3,0, 1,-1, 2, -0.15628705155964273*y*z)
	DECLARE_YlmProd(3,0, 1,-1, 4, -0.1302392096330356*y*z*(3.*Power(x,2) + 3.*Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,0, 1,0, 2, -0.07814352577982137*(Power(x,2) + Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(3,0, 1,0, 4, 0.026047841926607123*(3.*Power(x,4) + 6.*Power(x,2)*Power(y,2) + 3.*Power(y,4) - 24.*Power(x,2)*Power(z,2) - 24.*Power(y,2)*Power(z,2) + 8.*Power(z,4)))
	DECLARE_YlmProd(3,0, 1,1, 2, -0.15628705155964273*x*z)
	DECLARE_YlmProd(3,0, 1,1, 4, -0.1302392096330356*x*z*(3.*Power(x,2) + 3.*Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,0, 2,-2, 3, -0.5436176220072511*x*y*z)
	DECLARE_YlmProd(3,0, 2,-2, 5, -0.6795220275090639*x*y*z*(Power(x,2) + Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(3,0, 2,-1, 1, -0.06989369425807515*y)
	DECLARE_YlmProd(3,0, 2,-1, 3, -0.027180881100362552*y*(Power(x,2) + Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,0, 2,-1, 5, 0.0970745753584377*y*(Power(x,4) + 2.*Power(x,2)*Power(y,2) + Power(y,4) - 12.*Power(x,2)*Power(z,2) - 12.*Power(y,2)*Power(z,2) + 8.*Power(z,4)))
	DECLARE_YlmProd(3,0, 2,0, 1, 0.12105942958367123*z)
	DECLARE_YlmProd(3,0, 2,0, 3, 0.06277155608042212*z*(-3.*Power(x,2) - 3.*Power(y,2) + 2.*Power(z,2)))
	DECLARE_YlmProd(3,0, 2,0, 5, 0.02802301610733131*z*(15.*Power(x,4) + 30.*Power(x,2)*Power(y,2) + 15.*Power(y,4) - 40.*Power(x,2)*Power(z,2) - 40.*Power(y,2)*Power(z,2) + 8.*Power(z,4)))
	DECLARE_YlmProd(3,0, 2,1, 1, -0.06989369425807515*x)
	DECLARE_YlmProd(3,0, 2,1, 3, -0.027180881100362552*x*(Power(x,2) + Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,0, 2,1, 5, 0.0970745753584377*x*(Power(x,4) + 2.*Power(x,2)*Power(y,2) + Power(y,4) - 12.*Power(x,2)*Power(z,2) - 12.*Power(y,2)*Power(z,2) + 8.*Power(z,4)))
	DECLARE_YlmProd(3,0, 2,2, 3, -0.27180881100362553*(x - y)*(x + y)*z)
	DECLARE_YlmProd(3,0, 2,2, 5, -0.33976101375453194*(x - y)*(x + y)*z*(Power(x,2) + Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(3,0, 3,-3, 4, 0.36031140483894136*y*(-3.*Power(x,2) + Power(y,2))*z)
	DECLARE_YlmProd(3,0, 3,-3, 6, 0.10008650134415036*y*(-3.*Power(x,2) + Power(y,2))*z*(3.*Power(x,2) + 3.*Power(y,2) - 8.*Power(z,2)))
	DECLARE_YlmProd(3,0, 3,-2, 2, -0.20546814802049995*x*y)
	DECLARE_YlmProd(3,0, 3,-2, 4, 0.0420275757314659*x*y*(Power(x,2) + Power(y,2) - 6.*Power(z,2)))
	DECLARE_YlmProd(3,0, 3,-2, 6, 0.16344057228903403*x*y*(Power(x,4) + 2.*Power(x,2)*Power(y,2) + Power(y,4) - 16.*Power(x,2)*Power(z,2) - 16.*Power(y,2)*Power(z,2) + 16.*Power(z,4)))
	DECLARE_YlmProd(3,0, 3,-1, 2, 0.06497473343613969*y*z)
	DECLARE_YlmProd(3,0, 3,-1, 4, -0.06645143192332467*y*z*(3.*Power(x,2) + 3.*Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,0, 3,-1, 6, 0.12921111762868687*y*z*(5.*Power(x,4) + 10.*Power(x,2)*Power(y,2) + 5.*Power(y,4) - 20.*Power(x,2)*Power(z,2) - 20.*Power(y,2)*Power(z,2) + 8.*Power(z,4)))
	DECLARE_YlmProd(3,0, 3,0, 0, 0.07957747154594767)
	DECLARE_YlmProd(3,0, 3,0, 2, -0.05305164769729845*(Power(x,2) + Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(3,0, 3,0, 4, 0.016277210088943842*(3.*Power(x,4) + 6.*Power(x,2)*Power(y,2) + 3.*Power(y,4) - 24.*Power(x,2)*Power(z,2) - 24.*Power(y,2)*Power(z,2) + 8.*Power(z,4)))
	DECLARE_YlmProd(3,0, 3,0, 6, -0.01507149082309615*(5.*Power(x,6) + 15.*Power(x,4)*Power(y,2) + 15.*Power(x,2)*Power(y,4) + 5.*Power(y,6) - 90.*Power(x,4)*Power(z,2) - 180.*Power(x,2)*Power(y,2)*Power(z,2) - 90.*Power(y,4)*Power(z,2) + 120.*Power(x,2)*Power(z,4) + 120.*Power(y,2)*Power(z,4) - 16.*Power(z,6)))
	DECLARE_YlmProd(3,1, 0,0, 3, -0.12893023963105413*x*(Power(x,2) + Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,1, 1,-1, 2, -0.06380392162086176*x*y)
	DECLARE_YlmProd(3,1, 1,-1, 4, -0.15950980405215442*x*y*(Power(x,2) + Power(y,2) - 6.*Power(z,2)))
	DECLARE_YlmProd(3,1, 1,0, 2, 0.25521568648344706*x*z)
	DECLARE_YlmProd(3,1, 1,0, 4, -0.15950980405215442*x*z*(3.*Power(x,2) + 3.*Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,1, 1,1, 2, -0.03190196081043088*(3.*Power(x,2) + Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,1, 1,1, 4, -0.03190196081043088*(4.*Power(x,4) + 3.*Power(x,2)*Power(y,2) - Power(y,4) - 27.*Power(x,2)*Power(z,2) + 3.*Power(y,2)*Power(z,2) + 4.*Power(z,4)))
	DECLARE_YlmProd(3,1, 2,-2, 1, -0.028533981195063098*y)
	DECLARE_YlmProd(3,1, 2,-2, 3, -0.011096548242524536*y*(21.*Power(x,2) + Power(y,2) - 24.*Power(z,2)))
	DECLARE_YlmProd(3,1, 2,-2, 5, 0.03963052943758763*y*(-6.*Power(x,4) - 5.*Power(x,2)*Power(y,2) + Power(y,4) + 51.*Power(x,2)*Power(z,2) - 5.*Power(y,2)*Power(z,2) - 6.*Power(z,4)))
	DECLARE_YlmProd(3,1, 2,-1, 3, 0.33289644727573614*x*y*z)
	DECLARE_YlmProd(3,1, 2,-1, 5, -0.8322411181893403*x*y*z*(Power(x,2) + Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(3,1, 2,0, 1, 0.09884461034412836*x)
	DECLARE_YlmProd(3,1, 2,0, 3, -0.0576593560340749*x*(Power(x,2) + Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,1, 2,0, 5, 0.10296313577513373*x*(Power(x,4) + 2.*Power(x,2)*Power(y,2) + Power(y,4) - 12.*Power(x,2)*Power(z,2) - 12.*Power(y,2)*Power(z,2) + 8.*Power(z,4)))
	DECLARE_YlmProd(3,1, 2,1, 1, 0.11413592478025239*z)
	DECLARE_YlmProd(3,1, 2,1, 3, 0.011096548242524536*z*(9.*Power(x,2) - 21.*Power(y,2) + 4.*Power(z,2)))
	DECLARE_YlmProd(3,1, 2,1, 5, -0.03963052943758763*z*(18.*Power(x,4) + 15.*Power(x,2)*Power(y,2) - 3.*Power(y,4) - 41.*Power(x,2)*Power(z,2) + Power(y,2)*Power(z,2) + 4.*Power(z,4)))
	DECLARE_YlmProd(3,1, 2,2, 1, -0.028533981195063098*x)
	DECLARE_YlmProd(3,1, 2,2, 3, -0.011096548242524536*x*(11.*Power(x,2) - 9.*Power(y,2) - 24.*Power(z,2)))
	DECLARE_YlmProd(3,1, 2,2, 5, -0.019815264718793815*x*(5.*Power(x,4) - 4.*Power(x,2)*Power(y,2) - 9.*Power(y,4) - 46.*Power(x,2)*Power(z,2) + 66.*Power(y,2)*Power(z,2) + 12.*Power(z,4)))
	DECLARE_YlmProd(3,1, 3,-3, 2, -0.10273407401024998*x*y)
	DECLARE_YlmProd(3,1, 3,-3, 4, -0.0840551514629318*x*y*(5.*Power(x,2) - 2.*Power(y,2) - 9.*Power(z,2)))
	DECLARE_YlmProd(3,1, 3,-3, 6, -0.040860143072258506*x*y*(7.*Power(x,4) + 2.*Power(x,2)*Power(y,2) - 5.*Power(y,4) - 76.*Power(x,2)*Power(z,2) + 44.*Power(y,2)*Power(z,2) + 16.*Power(z,4)))
	DECLARE_YlmProd(3,1, 3,-2, 2, 0.1258230302612176*y*z)
	DECLARE_YlmProd(3,1, 3,-2, 4, -0.01715768594471149*y*z*(-9.*Power(x,2) + 19.*Power(y,2) - 16.*Power(z,2)))
	DECLARE_YlmProd(3,1, 3,-2, 6, 0.2001730026883007*y*z*(-8.*Power(x,4) - 7.*Power(x,2)*Power(y,2) + Power(y,4) + 23.*Power(x,2)*Power(z,2) - Power(y,2)*Power(z,2) - 2.*Power(z,4)))
	DECLARE_YlmProd(3,1, 3,-1, 2, 0.15915494309189535*x*y)
	DECLARE_YlmProd(3,1, 3,-1, 4, -0.10851473392629227*x*y*(Power(x,2) + Power(y,2) - 6.*Power(z,2)))
	DECLARE_YlmProd(3,1, 3,-1, 6, 0.15825065364250956*x*y*(Power(x,4) + 2.*Power(x,2)*Power(y,2) + Power(y,4) - 16.*Power(x,2)*Power(z,2) - 16.*Power(y,2)*Power(z,2) + 16.*Power(z,4)))
	DECLARE_YlmProd(3,1, 3,0, 2, 0.06497473343613969*x*z)
	DECLARE_YlmProd(3,1, 3,0, 4, -0.06645143192332467*x*z*(3.*Power(x,2) + 3.*Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,1, 3,0, 6, 0.12921111762868687*x*z*(5.*Power(x,4) + 10.*Power(x,2)*Power(y,2) + 5.*Power(y,4) - 20.*Power(x,2)*Power(z,2) - 20.*Power(y,2)*Power(z,2) + 8.*Power(z,4)))
	DECLARE_YlmProd(3,1, 3,1, 0, 0.07957747154594767)
	DECLARE_YlmProd(3,1, 3,1, 2, 0.039788735772973836*(Power(x,2) - 3.*Power(y,2) + 2.*Power(z,2)))
	DECLARE_YlmProd(3,1, 3,1, 4, -0.002712868348157307*(17.*Power(x,4) - 6.*Power(x,2)*Power(y,2) - 23.*Power(y,4) - 96.*Power(x,2)*Power(z,2) + 144.*Power(y,2)*Power(z,2) - 8.*Power(z,4)))
	DECLARE_YlmProd(3,1, 3,1, 6, 0.022607236234644227*(6.*Power(x,6) + 11.*Power(x,4)*Power(y,2) + 4.*Power(x,2)*Power(y,4) - Power(y,6) - 101.*Power(x,4)*Power(z,2) - 90.*Power(x,2)*Power(y,2)*Power(z,2) + 11.*Power(y,4)*Power(z,2) + 116.*Power(x,2)*Power(z,4) + 4.*Power(y,2)*Power(z,4) - 8.*Power(z,6)))
	DECLARE_YlmProd(3,2, 0,0, 3, 0.4077132165054383*(x - y)*(x + y)*z)
	DECLARE_YlmProd(3,2, 1,-1, 2, -0.20176571597278542*y*z)
	DECLARE_YlmProd(3,2, 1,-1, 4, -0.10088285798639271*y*z*(-9.*Power(x,2) + 5.*Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(3,2, 1,0, 2, 0.10088285798639271*(x - y)*(x + y))
	DECLARE_YlmProd(3,2, 1,0, 4, -0.10088285798639271*(x - y)*(x + y)*(Power(x,2) + Power(y,2) - 6.*Power(z,2)))
	DECLARE_YlmProd(3,2, 1,1, 2, 0.20176571597278542*x*z)
	DECLARE_YlmProd(3,2, 1,1, 4, 0.10088285798639271*x*z*(5.*Power(x,2) - 9.*Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(3,2, 2,-2, 5, 1.5790664975542215*x*(x - y)*y*(x + y)*z)
	DECLARE_YlmProd(3,2, 2,-1, 1, -0.09023237128881265*y)
	DECLARE_YlmProd(3,2, 2,-1, 3, -0.035090366612316036*y*(-9.*Power(x,2) + Power(y,2) + 6.*Power(z,2)))
	DECLARE_YlmProd(3,2, 2,-1, 5, 0.02506454758022574*y*(-9.*Power(x,4) - 4.*Power(x,2)*Power(y,2) + 5.*Power(y,4) + 66.*Power(x,2)*Power(z,2) - 46.*Power(y,2)*Power(z,2) + 12.*Power(z,4)))
	DECLARE_YlmProd(3,2, 2,0, 5, -0.4558372337156246*(x - y)*(x + y)*z*(Power(x,2) + Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(3,2, 2,1, 1, 0.09023237128881265*x)
	DECLARE_YlmProd(3,2, 2,1, 3, 0.035090366612316036*x*(Power(x,2) - 9.*Power(y,2) + 6.*Power(z,2)))
	DECLARE_YlmProd(3,2, 2,1, 5, -0.02506454758022574*x*(5.*Power(x,4) - 4.*Power(x,2)*Power(y,2) - 9.*Power(y,4) - 46.*Power(x,2)*Power(z,2) + 66.*Power(y,2)*Power(z,2) + 12.*Power(z,4)))
	DECLARE_YlmProd(3,2, 2,2, 1, 0.09023237128881265*z)
	DECLARE_YlmProd(3,2, 2,2, 3, -0.07018073322463207*z*(-3.*Power(x,2) - 3.*Power(y,2) + 2.*Power(z,2)))
	DECLARE_YlmProd(3,2, 2,2, 5, 0.01253227379011287*z*(39.*Power(x,4) - 174.*Power(x,2)*Power(y,2) + 39.*Power(y,4) - 20.*Power(x,2)*Power(z,2) - 20.*Power(y,2)*Power(z,2) + 4.*Power(z,4)))
	DECLARE_YlmProd(3,2, 3,-3, 2, 0.16243683359034922*y*z)
	DECLARE_YlmProd(3,2, 3,-3, 4, 0.06645143192332467*y*z*(3.*Power(x,2) + 3.*Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,2, 3,-3, 6, 0.025842223525737378*y*z*(85.*Power(x,4) - 160.*Power(x,2)*Power(y,2) + 19.*Power(y,4) - 10.*Power(x,2)*Power(z,2) - 10.*Power(y,2)*Power(z,2) + 4.*Power(z,4)))
	DECLARE_YlmProd(3,2, 3,-2, 4, 0.379801568742023*x*(x - y)*y*(x + y))
	DECLARE_YlmProd(3,2, 3,-2, 6, -0.379801568742023*x*(x - y)*y*(x + y)*(Power(x,2) + Power(y,2) - 10.*Power(z,2)))
	DECLARE_YlmProd(3,2, 3,-1, 2, -0.1258230302612176*y*z)
	DECLARE_YlmProd(3,2, 3,-1, 4, 0.01715768594471149*y*z*(33.*Power(x,2) + 5.*Power(y,2) - 16.*Power(z,2)))
	DECLARE_YlmProd(3,2, 3,-1, 6, 0.10008650134415036*y*z*(-11.*Power(x,4) - 4.*Power(x,2)*Power(y,2) + 7.*Power(y,4) + 26.*Power(x,2)*Power(z,2) - 22.*Power(y,2)*Power(z,2) + 4.*Power(z,4)))
	DECLARE_YlmProd(3,2, 3,0, 2, -0.10273407401024998*(x - y)*(x + y))
	DECLARE_YlmProd(3,2, 3,0, 4, 0.02101378786573295*(x - y)*(x + y)*(Power(x,2) + Power(y,2) - 6.*Power(z,2)))
	DECLARE_YlmProd(3,2, 3,0, 6, 0.08172028614451701*(x - y)*(x + y)*(Power(x,4) + 2.*Power(x,2)*Power(y,2) + Power(y,4) - 16.*Power(x,2)*Power(z,2) - 16.*Power(y,2)*Power(z,2) + 16.*Power(z,4)))
	DECLARE_YlmProd(3,2, 3,1, 2, 0.1258230302612176*x*z)
	DECLARE_YlmProd(3,2, 3,1, 4, -0.01715768594471149*x*z*(5.*Power(x,2) + 33.*Power(y,2) - 16.*Power(z,2)))
	DECLARE_YlmProd(3,2, 3,1, 6, -0.10008650134415036*x*z*(7.*Power(x,4) - 4.*Power(x,2)*Power(y,2) - 11.*Power(y,4) - 22.*Power(x,2)*Power(z,2) + 26.*Power(y,2)*Power(z,2) + 4.*Power(z,4)))
	DECLARE_YlmProd(3,2, 3,2, 0, 0.07957747154594767)
	DECLARE_YlmProd(3,2, 3,2, 4, 0.0379801568742023*(Power(x,4) - 18.*Power(x,2)*Power(y,2) + Power(y,4) + 12.*Power(x,2)*Power(z,2) + 12.*Power(y,2)*Power(z,2) - 4.*Power(z,4)))
	DECLARE_YlmProd(3,2, 3,2, 6, -0.00904289449385769*(13.*Power(x,6) - 45.*Power(x,4)*Power(y,2) - 45.*Power(x,2)*Power(y,4) + 13.*Power(y,6) - 150.*Power(x,4)*Power(z,2) + 540.*Power(x,2)*Power(y,2)*Power(z,2) - 150.*Power(y,4)*Power(z,2) + 60.*Power(x,2)*Power(z,4) + 60.*Power(y,2)*Power(z,4) - 8.*Power(z,6)))
	DECLARE_YlmProd(3,3, 0,0, 3, 0.16644822363786807*x*(Power(x,2) - 3.*Power(y,2)))
	DECLARE_YlmProd(3,3, 1,-1, 2, -0.24711152586032095*x*y)
	DECLARE_YlmProd(3,3, 1,-1, 4, 0.041185254310053494*x*y*(13.*Power(x,2) - 15.*Power(y,2) + 6.*Power(z,2)))
	DECLARE_YlmProd(3,3, 1,0, 4, 0.28829678017037447*x*(Power(x,2) - 3.*Power(y,2))*z)
	DECLARE_YlmProd(3,3, 1,1, 2, 0.12355576293016048*(x - y)*(x + y))
	DECLARE_YlmProd(3,3, 1,1, 4, 0.041185254310053494*(4.*Power(x,4) - 21.*Power(x,2)*Power(y,2) + 3.*Power(y,4) - 3.*Power(x,2)*Power(z,2) + 3.*Power(y,2)*Power(z,2)))
	DECLARE_YlmProd(3,3, 2,-2, 1, -0.11051163396947497*y)
	DECLARE_YlmProd(3,3, 2,-2, 3, -0.04297674654368472*y*(Power(x,2) + Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,3, 2,-2, 5, 0.030697676102631938*y*(26.*Power(x,4) - 53.*Power(x,2)*Power(y,2) + 5.*Power(y,4) + 3.*Power(x,2)*Power(z,2) + 3.*Power(y,2)*Power(z,2) - 2.*Power(z,4)))
	DECLARE_YlmProd(3,3, 2,-1, 3, -0.4297674654368472*x*y*z)
	DECLARE_YlmProd(3,3, 2,-1, 5, 0.2148837327184236*x*y*z*(5.*Power(x,2) - 7.*Power(y,2) + 2.*Power(z,2)))
	DECLARE_YlmProd(3,3, 2,0, 3, -0.12406318092945343*x*(Power(x,2) - 3.*Power(y,2)))
	DECLARE_YlmProd(3,3, 2,0, 5, -0.06203159046472671*x*(Power(x,2) - 3.*Power(y,2))*(Power(x,2) + Power(y,2) - 8.*Power(z,2)))
	DECLARE_YlmProd(3,3, 2,1, 3, 0.2148837327184236*(x - y)*(x + y)*z)
	DECLARE_YlmProd(3,3, 2,1, 5, -0.2148837327184236*z*(-2.*Power(x,4) + 9.*Power(x,2)*Power(y,2) - Power(y,4) + Power(x,2)*Power(z,2) - Power(y,2)*Power(z,2)))
	DECLARE_YlmProd(3,3, 2,2, 1, 0.11051163396947497*x)
	DECLARE_YlmProd(3,3, 2,2, 3, 0.04297674654368472*x*(Power(x,2) + Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,3, 2,2, 5, 0.015348838051315969*x*(11.*Power(x,4) - 104.*Power(x,2)*Power(y,2) + 53.*Power(y,4) - 6.*Power(x,2)*Power(z,2) - 6.*Power(y,2)*Power(z,2) + 4.*Power(z,4)))
	DECLARE_YlmProd(3,3, 3,-3, 6, 0.34815143801352105*x*y*(Power(x,2) - 3.*Power(y,2))*(3.*Power(x,2) - Power(y,2)))
	DECLARE_YlmProd(3,3, 3,-2, 2, -0.16243683359034922*y*z)
	DECLARE_YlmProd(3,3, 3,-2, 4, -0.06645143192332467*y*z*(3.*Power(x,2) + 3.*Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,3, 3,-2, 6, 0.051684447051474756*y*z*(40.*Power(x,4) - 85.*Power(x,2)*Power(y,2) + 7.*Power(y,4) + 5.*Power(x,2)*Power(z,2) + 5.*Power(y,2)*Power(z,2) - 2.*Power(z,4)))
	DECLARE_YlmProd(3,3, 3,-1, 2, 0.10273407401024998*x*y)
	DECLARE_YlmProd(3,3, 3,-1, 4, -0.0840551514629318*x*y*(2.*Power(x,2) - 5.*Power(y,2) + 9.*Power(z,2)))
	DECLARE_YlmProd(3,3, 3,-1, 6, -0.040860143072258506*x*y*(5.*Power(x,4) - 2.*Power(x,2)*Power(y,2) - 7.*Power(y,4) - 44.*Power(x,2)*Power(z,2) + 76.*Power(y,2)*Power(z,2) - 16.*Power(z,4)))
	DECLARE_YlmProd(3,3, 3,0, 4, -0.36031140483894136*x*(Power(x,2) - 3.*Power(y,2))*z)
	DECLARE_YlmProd(3,3, 3,0, 6, -0.10008650134415036*x*(Power(x,2) - 3.*Power(y,2))*z*(3.*Power(x,2) + 3.*Power(y,2) - 8.*Power(z,2)))
	DECLARE_YlmProd(3,3, 3,1, 2, -0.05136703700512499*(x - y)*(x + y))
	DECLARE_YlmProd(3,3, 3,1, 4, -0.010506893932866475*(13.*Power(x,4) - 42.*Power(x,2)*Power(y,2) + Power(y,4) - 36.*Power(x,2)*Power(z,2) + 36.*Power(y,2)*Power(z,2)))
	DECLARE_YlmProd(3,3, 3,1, 6, -0.040860143072258506*(2.*Power(x,6) - 7.*Power(x,4)*Power(y,2) - 8.*Power(x,2)*Power(y,4) + Power(y,6) - 23.*Power(x,4)*Power(z,2) + 90.*Power(x,2)*Power(y,2)*Power(z,2) - 7.*Power(y,4)*Power(z,2) + 8.*Power(x,2)*Power(z,4) - 8.*Power(y,2)*Power(z,4)))
	DECLARE_YlmProd(3,3, 3,2, 2, 0.16243683359034922*x*z)
	DECLARE_YlmProd(3,3, 3,2, 4, 0.06645143192332467*x*z*(3.*Power(x,2) + 3.*Power(y,2) - 4.*Power(z,2)))
	DECLARE_YlmProd(3,3, 3,2, 6, 0.025842223525737378*x*z*(19.*Power(x,4) - 160.*Power(x,2)*Power(y,2) + 85.*Power(y,4) - 10.*Power(x,2)*Power(z,2) - 10.*Power(y,2)*Power(z,2) + 4.*Power(z,4)))
	DECLARE_YlmProd(3,3, 3,3, 0, 0.07957747154594767)
	DECLARE_YlmProd(3,3, 3,3, 2, 0.06631455962162307*(Power(x,2) + Power(y,2) - 2.*Power(z,2)))
	DECLARE_YlmProd(3,3, 3,3, 4, 0.008138605044471921*(3.*Power(x,4) + 6.*Power(x,2)*Power(y,2) + 3.*Power(y,4) - 24.*Power(x,2)*Power(z,2) - 24.*Power(y,2)*Power(z,2) + 8.*Power(z,4)))
	DECLARE_YlmProd(3,3, 3,3, 6, 0.001507149082309615*(118.*Power(x,6) - 1725.*Power(x,4)*Power(y,2) + 1740.*Power(x,2)*Power(y,4) - 113.*Power(y,6) - 45.*Power(x,4)*Power(z,2) - 90.*Power(x,2)*Power(y,2)*Power(z,2) - 45.*Power(y,4)*Power(z,2) + 60.*Power(x,2)*Power(z,4) + 60.*Power(y,2)*Power(z,4) - 8.*Power(z,6)))
	#undef DECLARE_YlmProd
	#undef Power
}

//! Compute real spherical harmonics given a unit vector
//! Positive m returns sqrt(2) Re(Ylm) and negative m returns sqrt(2) Im(Ylm)
template<int l, int m>
__hostanddev__ double Ylm(const vector3<>& qhat)
{	return YlmInternal::Ylm<l,m>(qhat[0],qhat[1],qhat[2]);
}

//! Compute the component of the product of two real spherical harmonics at a given angular momentum l
//! Normalization and m-convention is as for Ylm.
//! Implementation is currently included only for l1 <= l2 <= 3 and for m1 <= m2 when l1 = l2
template<int l1, int m1, int l2, int m2, int l>
__hostanddev__ double YlmProd(const vector3<>& qhat)
{	return YlmInternal::YlmProd<l1,m1,l2,m2,l>(qhat[0],qhat[1],qhat[2]);
}

//! Switch a function templated over l,m for all supported l,m with parenthesis enclosed argument list argList
#define SwitchTemplate_lm(l,m,fTemplate,argList) \
	switch(l+m + 10*( l )) \
	{	case 0: fTemplate<0,0> argList; break; \
		case 10: fTemplate<1,-1> argList; break; \
		case 11: fTemplate<1,0> argList; break; \
		case 12: fTemplate<1,1> argList; break; \
		case 20: fTemplate<2,-2> argList; break; \
		case 21: fTemplate<2,-1> argList; break; \
		case 22: fTemplate<2,0> argList; break; \
		case 23: fTemplate<2,1> argList; break; \
		case 24: fTemplate<2,2> argList; break; \
		case 30: fTemplate<3,-3> argList; break; \
		case 31: fTemplate<3,-2> argList; break; \
		case 32: fTemplate<3,-1> argList; break; \
		case 33: fTemplate<3,0> argList; break; \
		case 34: fTemplate<3,1> argList; break; \
		case 35: fTemplate<3,2> argList; break; \
		case 36: fTemplate<3,3> argList; break; \
	}

//! Switch a function templated over l1,m1,l2,m2,l for all supported non-zero combinations
//! with parenthesis enclosed argument list argList
#define SwitchTemplate_lmPair(l1,m1, l2,m2, l, fTemplate,argList) \
	switch(l + 10*( l2+m2 + 10*( l2 + 10*( l1+m1 + 10*( l1 ))))) \
	{	case 0: fTemplate<0,0, 0,0, 0> argList; break; \
		case 10001: fTemplate<1,-1, 0,0, 1> argList; break; \
		case 10100: fTemplate<1,-1, 1,-1, 0> argList; break; \
		case 10102: fTemplate<1,-1, 1,-1, 2> argList; break; \
		case 11001: fTemplate<1,0, 0,0, 1> argList; break; \
		case 11102: fTemplate<1,0, 1,-1, 2> argList; break; \
		case 11110: fTemplate<1,0, 1,0, 0> argList; break; \
		case 11112: fTemplate<1,0, 1,0, 2> argList; break; \
		case 12001: fTemplate<1,1, 0,0, 1> argList; break; \
		case 12102: fTemplate<1,1, 1,-1, 2> argList; break; \
		case 12112: fTemplate<1,1, 1,0, 2> argList; break; \
		case 12120: fTemplate<1,1, 1,1, 0> argList; break; \
		case 12122: fTemplate<1,1, 1,1, 2> argList; break; \
		case 20002: fTemplate<2,-2, 0,0, 2> argList; break; \
		case 20101: fTemplate<2,-2, 1,-1, 1> argList; break; \
		case 20103: fTemplate<2,-2, 1,-1, 3> argList; break; \
		case 20113: fTemplate<2,-2, 1,0, 3> argList; break; \
		case 20121: fTemplate<2,-2, 1,1, 1> argList; break; \
		case 20123: fTemplate<2,-2, 1,1, 3> argList; break; \
		case 20200: fTemplate<2,-2, 2,-2, 0> argList; break; \
		case 20202: fTemplate<2,-2, 2,-2, 2> argList; break; \
		case 20204: fTemplate<2,-2, 2,-2, 4> argList; break; \
		case 21002: fTemplate<2,-1, 0,0, 2> argList; break; \
		case 21101: fTemplate<2,-1, 1,-1, 1> argList; break; \
		case 21103: fTemplate<2,-1, 1,-1, 3> argList; break; \
		case 21111: fTemplate<2,-1, 1,0, 1> argList; break; \
		case 21113: fTemplate<2,-1, 1,0, 3> argList; break; \
		case 21123: fTemplate<2,-1, 1,1, 3> argList; break; \
		case 21202: fTemplate<2,-1, 2,-2, 2> argList; break; \
		case 21204: fTemplate<2,-1, 2,-2, 4> argList; break; \
		case 21210: fTemplate<2,-1, 2,-1, 0> argList; break; \
		case 21212: fTemplate<2,-1, 2,-1, 2> argList; break; \
		case 21214: fTemplate<2,-1, 2,-1, 4> argList; break; \
		case 22002: fTemplate<2,0, 0,0, 2> argList; break; \
		case 22101: fTemplate<2,0, 1,-1, 1> argList; break; \
		case 22103: fTemplate<2,0, 1,-1, 3> argList; break; \
		case 22111: fTemplate<2,0, 1,0, 1> argList; break; \
		case 22113: fTemplate<2,0, 1,0, 3> argList; break; \
		case 22121: fTemplate<2,0, 1,1, 1> argList; break; \
		case 22123: fTemplate<2,0, 1,1, 3> argList; break; \
		case 22202: fTemplate<2,0, 2,-2, 2> argList; break; \
		case 22204: fTemplate<2,0, 2,-2, 4> argList; break; \
		case 22212: fTemplate<2,0, 2,-1, 2> argList; break; \
		case 22214: fTemplate<2,0, 2,-1, 4> argList; break; \
		case 22220: fTemplate<2,0, 2,0, 0> argList; break; \
		case 22222: fTemplate<2,0, 2,0, 2> argList; break; \
		case 22224: fTemplate<2,0, 2,0, 4> argList; break; \
		case 23002: fTemplate<2,1, 0,0, 2> argList; break; \
		case 23103: fTemplate<2,1, 1,-1, 3> argList; break; \
		case 23111: fTemplate<2,1, 1,0, 1> argList; break; \
		case 23113: fTemplate<2,1, 1,0, 3> argList; break; \
		case 23121: fTemplate<2,1, 1,1, 1> argList; break; \
		case 23123: fTemplate<2,1, 1,1, 3> argList; break; \
		case 23202: fTemplate<2,1, 2,-2, 2> argList; break; \
		case 23204: fTemplate<2,1, 2,-2, 4> argList; break; \
		case 23212: fTemplate<2,1, 2,-1, 2> argList; break; \
		case 23214: fTemplate<2,1, 2,-1, 4> argList; break; \
		case 23222: fTemplate<2,1, 2,0, 2> argList; break; \
		case 23224: fTemplate<2,1, 2,0, 4> argList; break; \
		case 23230: fTemplate<2,1, 2,1, 0> argList; break; \
		case 23232: fTemplate<2,1, 2,1, 2> argList; break; \
		case 23234: fTemplate<2,1, 2,1, 4> argList; break; \
		case 24002: fTemplate<2,2, 0,0, 2> argList; break; \
		case 24101: fTemplate<2,2, 1,-1, 1> argList; break; \
		case 24103: fTemplate<2,2, 1,-1, 3> argList; break; \
		case 24113: fTemplate<2,2, 1,0, 3> argList; break; \
		case 24121: fTemplate<2,2, 1,1, 1> argList; break; \
		case 24123: fTemplate<2,2, 1,1, 3> argList; break; \
		case 24204: fTemplate<2,2, 2,-2, 4> argList; break; \
		case 24212: fTemplate<2,2, 2,-1, 2> argList; break; \
		case 24214: fTemplate<2,2, 2,-1, 4> argList; break; \
		case 24222: fTemplate<2,2, 2,0, 2> argList; break; \
		case 24224: fTemplate<2,2, 2,0, 4> argList; break; \
		case 24232: fTemplate<2,2, 2,1, 2> argList; break; \
		case 24234: fTemplate<2,2, 2,1, 4> argList; break; \
		case 24240: fTemplate<2,2, 2,2, 0> argList; break; \
		case 24242: fTemplate<2,2, 2,2, 2> argList; break; \
		case 24244: fTemplate<2,2, 2,2, 4> argList; break; \
		case 30003: fTemplate<3,-3, 0,0, 3> argList; break; \
		case 30102: fTemplate<3,-3, 1,-1, 2> argList; break; \
		case 30104: fTemplate<3,-3, 1,-1, 4> argList; break; \
		case 30114: fTemplate<3,-3, 1,0, 4> argList; break; \
		case 30122: fTemplate<3,-3, 1,1, 2> argList; break; \
		case 30124: fTemplate<3,-3, 1,1, 4> argList; break; \
		case 30201: fTemplate<3,-3, 2,-2, 1> argList; break; \
		case 30203: fTemplate<3,-3, 2,-2, 3> argList; break; \
		case 30205: fTemplate<3,-3, 2,-2, 5> argList; break; \
		case 30213: fTemplate<3,-3, 2,-1, 3> argList; break; \
		case 30215: fTemplate<3,-3, 2,-1, 5> argList; break; \
		case 30223: fTemplate<3,-3, 2,0, 3> argList; break; \
		case 30225: fTemplate<3,-3, 2,0, 5> argList; break; \
		case 30233: fTemplate<3,-3, 2,1, 3> argList; break; \
		case 30235: fTemplate<3,-3, 2,1, 5> argList; break; \
		case 30241: fTemplate<3,-3, 2,2, 1> argList; break; \
		case 30243: fTemplate<3,-3, 2,2, 3> argList; break; \
		case 30245: fTemplate<3,-3, 2,2, 5> argList; break; \
		case 30300: fTemplate<3,-3, 3,-3, 0> argList; break; \
		case 30302: fTemplate<3,-3, 3,-3, 2> argList; break; \
		case 30304: fTemplate<3,-3, 3,-3, 4> argList; break; \
		case 30306: fTemplate<3,-3, 3,-3, 6> argList; break; \
		case 31003: fTemplate<3,-2, 0,0, 3> argList; break; \
		case 31102: fTemplate<3,-2, 1,-1, 2> argList; break; \
		case 31104: fTemplate<3,-2, 1,-1, 4> argList; break; \
		case 31112: fTemplate<3,-2, 1,0, 2> argList; break; \
		case 31114: fTemplate<3,-2, 1,0, 4> argList; break; \
		case 31122: fTemplate<3,-2, 1,1, 2> argList; break; \
		case 31124: fTemplate<3,-2, 1,1, 4> argList; break; \
		case 31201: fTemplate<3,-2, 2,-2, 1> argList; break; \
		case 31203: fTemplate<3,-2, 2,-2, 3> argList; break; \
		case 31205: fTemplate<3,-2, 2,-2, 5> argList; break; \
		case 31211: fTemplate<3,-2, 2,-1, 1> argList; break; \
		case 31213: fTemplate<3,-2, 2,-1, 3> argList; break; \
		case 31215: fTemplate<3,-2, 2,-1, 5> argList; break; \
		case 31225: fTemplate<3,-2, 2,0, 5> argList; break; \
		case 31231: fTemplate<3,-2, 2,1, 1> argList; break; \
		case 31233: fTemplate<3,-2, 2,1, 3> argList; break; \
		case 31235: fTemplate<3,-2, 2,1, 5> argList; break; \
		case 31245: fTemplate<3,-2, 2,2, 5> argList; break; \
		case 31302: fTemplate<3,-2, 3,-3, 2> argList; break; \
		case 31304: fTemplate<3,-2, 3,-3, 4> argList; break; \
		case 31306: fTemplate<3,-2, 3,-3, 6> argList; break; \
		case 31310: fTemplate<3,-2, 3,-2, 0> argList; break; \
		case 31314: fTemplate<3,-2, 3,-2, 4> argList; break; \
		case 31316: fTemplate<3,-2, 3,-2, 6> argList; break; \
		case 32003: fTemplate<3,-1, 0,0, 3> argList; break; \
		case 32102: fTemplate<3,-1, 1,-1, 2> argList; break; \
		case 32104: fTemplate<3,-1, 1,-1, 4> argList; break; \
		case 32112: fTemplate<3,-1, 1,0, 2> argList; break; \
		case 32114: fTemplate<3,-1, 1,0, 4> argList; break; \
		case 32122: fTemplate<3,-1, 1,1, 2> argList; break; \
		case 32124: fTemplate<3,-1, 1,1, 4> argList; break; \
		case 32201: fTemplate<3,-1, 2,-2, 1> argList; break; \
		case 32203: fTemplate<3,-1, 2,-2, 3> argList; break; \
		case 32205: fTemplate<3,-1, 2,-2, 5> argList; break; \
		case 32211: fTemplate<3,-1, 2,-1, 1> argList; break; \
		case 32213: fTemplate<3,-1, 2,-1, 3> argList; break; \
		case 32215: fTemplate<3,-1, 2,-1, 5> argList; break; \
		case 32221: fTemplate<3,-1, 2,0, 1> argList; break; \
		case 32223: fTemplate<3,-1, 2,0, 3> argList; break; \
		case 32225: fTemplate<3,-1, 2,0, 5> argList; break; \
		case 32233: fTemplate<3,-1, 2,1, 3> argList; break; \
		case 32235: fTemplate<3,-1, 2,1, 5> argList; break; \
		case 32241: fTemplate<3,-1, 2,2, 1> argList; break; \
		case 32243: fTemplate<3,-1, 2,2, 3> argList; break; \
		case 32245: fTemplate<3,-1, 2,2, 5> argList; break; \
		case 32302: fTemplate<3,-1, 3,-3, 2> argList; break; \
		case 32304: fTemplate<3,-1, 3,-3, 4> argList; break; \
		case 32306: fTemplate<3,-1, 3,-3, 6> argList; break; \
		case 32312: fTemplate<3,-1, 3,-2, 2> argList; break; \
		case 32314: fTemplate<3,-1, 3,-2, 4> argList; break; \
		case 32316: fTemplate<3,-1, 3,-2, 6> argList; break; \
		case 32320: fTemplate<3,-1, 3,-1, 0> argList; break; \
		case 32322: fTemplate<3,-1, 3,-1, 2> argList; break; \
		case 32324: fTemplate<3,-1, 3,-1, 4> argList; break; \
		case 32326: fTemplate<3,-1, 3,-1, 6> argList; break; \
		case 33003: fTemplate<3,0, 0,0, 3> argList; break; \
		case 33102: fTemplate<3,0, 1,-1, 2> argList; break; \
		case 33104: fTemplate<3,0, 1,-1, 4> argList; break; \
		case 33112: fTemplate<3,0, 1,0, 2> argList; break; \
		case 33114: fTemplate<3,0, 1,0, 4> argList; break; \
		case 33122: fTemplate<3,0, 1,1, 2> argList; break; \
		case 33124: fTemplate<3,0, 1,1, 4> argList; break; \
		case 33203: fTemplate<3,0, 2,-2, 3> argList; break; \
		case 33205: fTemplate<3,0, 2,-2, 5> argList; break; \
		case 33211: fTemplate<3,0, 2,-1, 1> argList; break; \
		case 33213: fTemplate<3,0, 2,-1, 3> argList; break; \
		case 33215: fTemplate<3,0, 2,-1, 5> argList; break; \
		case 33221: fTemplate<3,0, 2,0, 1> argList; break; \
		case 33223: fTemplate<3,0, 2,0, 3> argList; break; \
		case 33225: fTemplate<3,0, 2,0, 5> argList; break; \
		case 33231: fTemplate<3,0, 2,1, 1> argList; break; \
		case 33233: fTemplate<3,0, 2,1, 3> argList; break; \
		case 33235: fTemplate<3,0, 2,1, 5> argList; break; \
		case 33243: fTemplate<3,0, 2,2, 3> argList; break; \
		case 33245: fTemplate<3,0, 2,2, 5> argList; break; \
		case 33304: fTemplate<3,0, 3,-3, 4> argList; break; \
		case 33306: fTemplate<3,0, 3,-3, 6> argList; break; \
		case 33312: fTemplate<3,0, 3,-2, 2> argList; break; \
		case 33314: fTemplate<3,0, 3,-2, 4> argList; break; \
		case 33316: fTemplate<3,0, 3,-2, 6> argList; break; \
		case 33322: fTemplate<3,0, 3,-1, 2> argList; break; \
		case 33324: fTemplate<3,0, 3,-1, 4> argList; break; \
		case 33326: fTemplate<3,0, 3,-1, 6> argList; break; \
		case 33330: fTemplate<3,0, 3,0, 0> argList; break; \
		case 33332: fTemplate<3,0, 3,0, 2> argList; break; \
		case 33334: fTemplate<3,0, 3,0, 4> argList; break; \
		case 33336: fTemplate<3,0, 3,0, 6> argList; break; \
		case 34003: fTemplate<3,1, 0,0, 3> argList; break; \
		case 34102: fTemplate<3,1, 1,-1, 2> argList; break; \
		case 34104: fTemplate<3,1, 1,-1, 4> argList; break; \
		case 34112: fTemplate<3,1, 1,0, 2> argList; break; \
		case 34114: fTemplate<3,1, 1,0, 4> argList; break; \
		case 34122: fTemplate<3,1, 1,1, 2> argList; break; \
		case 34124: fTemplate<3,1, 1,1, 4> argList; break; \
		case 34201: fTemplate<3,1, 2,-2, 1> argList; break; \
		case 34203: fTemplate<3,1, 2,-2, 3> argList; break; \
		case 34205: fTemplate<3,1, 2,-2, 5> argList; break; \
		case 34213: fTemplate<3,1, 2,-1, 3> argList; break; \
		case 34215: fTemplate<3,1, 2,-1, 5> argList; break; \
		case 34221: fTemplate<3,1, 2,0, 1> argList; break; \
		case 34223: fTemplate<3,1, 2,0, 3> argList; break; \
		case 34225: fTemplate<3,1, 2,0, 5> argList; break; \
		case 34231: fTemplate<3,1, 2,1, 1> argList; break; \
		case 34233: fTemplate<3,1, 2,1, 3> argList; break; \
		case 34235: fTemplate<3,1, 2,1, 5> argList; break; \
		case 34241: fTemplate<3,1, 2,2, 1> argList; break; \
		case 34243: fTemplate<3,1, 2,2, 3> argList; break; \
		case 34245: fTemplate<3,1, 2,2, 5> argList; break; \
		case 34302: fTemplate<3,1, 3,-3, 2> argList; break; \
		case 34304: fTemplate<3,1, 3,-3, 4> argList; break; \
		case 34306: fTemplate<3,1, 3,-3, 6> argList; break; \
		case 34312: fTemplate<3,1, 3,-2, 2> argList; break; \
		case 34314: fTemplate<3,1, 3,-2, 4> argList; break; \
		case 34316: fTemplate<3,1, 3,-2, 6> argList; break; \
		case 34322: fTemplate<3,1, 3,-1, 2> argList; break; \
		case 34324: fTemplate<3,1, 3,-1, 4> argList; break; \
		case 34326: fTemplate<3,1, 3,-1, 6> argList; break; \
		case 34332: fTemplate<3,1, 3,0, 2> argList; break; \
		case 34334: fTemplate<3,1, 3,0, 4> argList; break; \
		case 34336: fTemplate<3,1, 3,0, 6> argList; break; \
		case 34340: fTemplate<3,1, 3,1, 0> argList; break; \
		case 34342: fTemplate<3,1, 3,1, 2> argList; break; \
		case 34344: fTemplate<3,1, 3,1, 4> argList; break; \
		case 34346: fTemplate<3,1, 3,1, 6> argList; break; \
		case 35003: fTemplate<3,2, 0,0, 3> argList; break; \
		case 35102: fTemplate<3,2, 1,-1, 2> argList; break; \
		case 35104: fTemplate<3,2, 1,-1, 4> argList; break; \
		case 35112: fTemplate<3,2, 1,0, 2> argList; break; \
		case 35114: fTemplate<3,2, 1,0, 4> argList; break; \
		case 35122: fTemplate<3,2, 1,1, 2> argList; break; \
		case 35124: fTemplate<3,2, 1,1, 4> argList; break; \
		case 35205: fTemplate<3,2, 2,-2, 5> argList; break; \
		case 35211: fTemplate<3,2, 2,-1, 1> argList; break; \
		case 35213: fTemplate<3,2, 2,-1, 3> argList; break; \
		case 35215: fTemplate<3,2, 2,-1, 5> argList; break; \
		case 35225: fTemplate<3,2, 2,0, 5> argList; break; \
		case 35231: fTemplate<3,2, 2,1, 1> argList; break; \
		case 35233: fTemplate<3,2, 2,1, 3> argList; break; \
		case 35235: fTemplate<3,2, 2,1, 5> argList; break; \
		case 35241: fTemplate<3,2, 2,2, 1> argList; break; \
		case 35243: fTemplate<3,2, 2,2, 3> argList; break; \
		case 35245: fTemplate<3,2, 2,2, 5> argList; break; \
		case 35302: fTemplate<3,2, 3,-3, 2> argList; break; \
		case 35304: fTemplate<3,2, 3,-3, 4> argList; break; \
		case 35306: fTemplate<3,2, 3,-3, 6> argList; break; \
		case 35314: fTemplate<3,2, 3,-2, 4> argList; break; \
		case 35316: fTemplate<3,2, 3,-2, 6> argList; break; \
		case 35322: fTemplate<3,2, 3,-1, 2> argList; break; \
		case 35324: fTemplate<3,2, 3,-1, 4> argList; break; \
		case 35326: fTemplate<3,2, 3,-1, 6> argList; break; \
		case 35332: fTemplate<3,2, 3,0, 2> argList; break; \
		case 35334: fTemplate<3,2, 3,0, 4> argList; break; \
		case 35336: fTemplate<3,2, 3,0, 6> argList; break; \
		case 35342: fTemplate<3,2, 3,1, 2> argList; break; \
		case 35344: fTemplate<3,2, 3,1, 4> argList; break; \
		case 35346: fTemplate<3,2, 3,1, 6> argList; break; \
		case 35350: fTemplate<3,2, 3,2, 0> argList; break; \
		case 35354: fTemplate<3,2, 3,2, 4> argList; break; \
		case 35356: fTemplate<3,2, 3,2, 6> argList; break; \
		case 36003: fTemplate<3,3, 0,0, 3> argList; break; \
		case 36102: fTemplate<3,3, 1,-1, 2> argList; break; \
		case 36104: fTemplate<3,3, 1,-1, 4> argList; break; \
		case 36114: fTemplate<3,3, 1,0, 4> argList; break; \
		case 36122: fTemplate<3,3, 1,1, 2> argList; break; \
		case 36124: fTemplate<3,3, 1,1, 4> argList; break; \
		case 36201: fTemplate<3,3, 2,-2, 1> argList; break; \
		case 36203: fTemplate<3,3, 2,-2, 3> argList; break; \
		case 36205: fTemplate<3,3, 2,-2, 5> argList; break; \
		case 36213: fTemplate<3,3, 2,-1, 3> argList; break; \
		case 36215: fTemplate<3,3, 2,-1, 5> argList; break; \
		case 36223: fTemplate<3,3, 2,0, 3> argList; break; \
		case 36225: fTemplate<3,3, 2,0, 5> argList; break; \
		case 36233: fTemplate<3,3, 2,1, 3> argList; break; \
		case 36235: fTemplate<3,3, 2,1, 5> argList; break; \
		case 36241: fTemplate<3,3, 2,2, 1> argList; break; \
		case 36243: fTemplate<3,3, 2,2, 3> argList; break; \
		case 36245: fTemplate<3,3, 2,2, 5> argList; break; \
		case 36306: fTemplate<3,3, 3,-3, 6> argList; break; \
		case 36312: fTemplate<3,3, 3,-2, 2> argList; break; \
		case 36314: fTemplate<3,3, 3,-2, 4> argList; break; \
		case 36316: fTemplate<3,3, 3,-2, 6> argList; break; \
		case 36322: fTemplate<3,3, 3,-1, 2> argList; break; \
		case 36324: fTemplate<3,3, 3,-1, 4> argList; break; \
		case 36326: fTemplate<3,3, 3,-1, 6> argList; break; \
		case 36334: fTemplate<3,3, 3,0, 4> argList; break; \
		case 36336: fTemplate<3,3, 3,0, 6> argList; break; \
		case 36342: fTemplate<3,3, 3,1, 2> argList; break; \
		case 36344: fTemplate<3,3, 3,1, 4> argList; break; \
		case 36346: fTemplate<3,3, 3,1, 6> argList; break; \
		case 36352: fTemplate<3,3, 3,2, 2> argList; break; \
		case 36354: fTemplate<3,3, 3,2, 4> argList; break; \
		case 36356: fTemplate<3,3, 3,2, 6> argList; break; \
		case 36360: fTemplate<3,3, 3,3, 0> argList; break; \
		case 36362: fTemplate<3,3, 3,3, 2> argList; break; \
		case 36364: fTemplate<3,3, 3,3, 4> argList; break; \
		case 36366: fTemplate<3,3, 3,3, 6> argList; break; \
	}

#endif // JDFTX_ELECTRONIC_SPHERICALHARMONICS_H

