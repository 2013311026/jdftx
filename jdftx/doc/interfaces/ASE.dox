/** \page ASE ASE Interface

JDFTx contains a python interface class to the [Atomic Simulation Environment](<https://wiki.fysik.dtu.dk/ase/>).
This provides a quick but powerful interface to many features, including
[phonons](https://wiki.fysik.dtu.dk/ase/ase/phonons.html) and
[ab-initio molecular dynamics](https://wiki.fysik.dtu.dk/ase/ase/md.html)
alternative to the now built-in versions, or to barrier calculations
using the [nudged-elastic band](https://wiki.fysik.dtu.dk/ase/ase/neb.html) method.

The current implementation of the interface is as a force calculator,
which only exchanges forces and potential energies with ASE.

Installation
------------

The interface is available with the JDFTx source code, under the scripts directory (/jdftx/scripts/ase).
After installing JDFTx and ASE (follow instructions for each),
set the python path to access the interface file.
For example, in unix-based systems, add

       export PYTHONPATH=/path-to-jdftx/scripts/ase:$PYTHONPATH

to ~/.bashrc or ~/.profile files. Once this is done,
you can import the JDFTx calculator in python using:

       from JDFTx import JDFTx

Use
---

The JDFTx interface needs to know the path to the executable and to pseudopotentials (if not using a built-in pseudopotential set).
This can be done using arguments executable and pseudoDir in the constructor,
or by setting environment variables JDFTx and JDFTx_pseudo respectively.

The easiest way to use the interface is to set the environment variables

    export JDFTx=/path/to/jdftx
    export JDFTx_pseudo=/path/to/pseudopotential/directory

in the current shell, or in the ~/.bashrc or ~/.profile files.
Using the constructor, these would be instead:

    calculator = JDFTx(
        executable='/path/to/jdftx',
        pseudoDir='/path/to/pseudopotential/directory'
    )
    
The latter variable / argument is only needed if not using a built-in set like GBRV or SG15.
If using one of these pseudopotential sets, it is sufficient to only specify the executable
and name the set eg. using

    calculator = JDFTx(
        executable='/path/to/jdftx',
        pseudoSet='GBRV-pbe'
    )

where the supported sets are GBRV (shorthand for GBRV-pbe), GBRV-lda, GBRV-pbesol and SG15.

Finally, to use MPI or a job management system like SLURM, use:

    calculator = JDFTx(executable='mpirun -n Nprocs /path/to/jdftx')

or

    calculator = JDFTx(executable='srun -n Nprocs /path/to/jdftx')

Note that the command that submits the job eg. srun should not release the shell
until the job is completed. Therefore, in slurm, srun would work, but not sbatch.

Example
-------

Below is a sample python script that uses jdftx through the ASE interfae to calculate 
the bond length of CO molecule using the BFGS minimization algorithm.
Note that you must edit the executable path in the code below
(or remove that argument and set the environment variable JDFTx).

    from ase import Atoms
    from JDFTx import *

    d = 1.25
    CO = Atoms('CO', 
        positions=[(0, 0, 0), (0, 0, d)],
        cell=[(6,0,0),(0,6,0),(0,0,7)],
        pbc = [False, False, False])

    #Set up JDFTx calculator
    calculator = JDFTx(
        pseudoSet='GBRV',
        commands={'elec-cutoff' : '20 100'}
    )
    CO.set_calculator(calculator)

    #Structure optimization
    from ase.optimize import BFGS
    dyn = BFGS(CO)
    dyn.run(fmax=0.05)

Output from this script is:

          Step     Time          Energy         fmax
    BFGS:    0 15:40:16     -591.232059        8.6509
    BFGS:    1 15:40:27     -591.723809        3.0366
    BFGS:    2 15:40:37     -591.754824        1.8767
    BFGS:    3 15:40:48     -591.768306        0.1966
    BFGS:    4 15:41:00     -591.768465        0.0137

See [this page](https://wiki.fysik.dtu.dk/ase/tutorials/tutorials.html)
for many other examples on how to use ASE. 
It is straightforward to use the JDFTx calculator instead as shown above.

Any feature of JDFTx, such as solvation, can be used simply by
passing an appropriate dict of JDFTx input file commands,
as shown in the example for elec-cutoff.

*/
