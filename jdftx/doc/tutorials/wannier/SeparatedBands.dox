/** \page SeparatedBands Separated bands

This tutorial will introduce the calculation of maximally-localized %Wannier
functions (MLWFs) for a set of bands that are separated in energies from other bands.
This is applicable for the occupied valence bands of semiconductors and insulators.
Here, we will construct and visualize %Wannier functions for silicon in the diamond structure,
and demonstrate band-structure interpolation using MLWF-based <i>ab initio</i> tight-binding models.

In a small molecule, the electron wavefunctions (Kohn-Sham orbitals) are
localized around a few atoms, and we can easily visualize and interpret them,
as we did for a water molecule in the \ref Outputs tutorial.
Notice that there was no corresponding example for the solids.
This was, in part, because the Kohn-Sham orbitals now extend over
the entire crystal, depend on the Bloch wave-vector k in addition to
a band index (orbital number) and are, in general, complex-valued.

%Wannier functions represent a Fourier transform of the Kohn-Sham orbitals over
Bloch-wave vectors, which localizes them around one unit cell of the crystal.
Now we no longer need to deal with each k separately:
we have one %Wannier function for each band centered at each unit cell;
the %Wannier functions are identical from one unit cell center to another.
However, these functions are not uniquely determined because the phase
of the orbitals are independently variable for each k, and different
combinations of phases generate different sets of  %Wannier functions.
Maximally-localized %Wannier functions are a special case, where
linear combinations and phases of orbitals from (i.e. unitary
transformations of) a number of bands at each  k are optimized
to make the %Wannier functions as localized as possible.
MLWFs are still not unique, however, since once can still choose
the combinations of bands that are linearly combined
and the initial guess for the phases that determines which
of several minima the optimization procedure converges to.
See [this comprehensive review paper](http://dx.doi.org/10.1103/RevModPhys.84.1419)
for a detailed introduction to MLWFs and their applications.

Let's start with the silicon calculations from the \ref BandStructure tutorial.
Remember to run the total energy calculation, construct the k-point path,
run the band-structure calculation, and then plot the band structure.

Now, we set up a %Wannier input file:

    #Save the following to wannier.in:
    include totalE.in
    
    wannier \
        saveWfnsRealSpace yes
    
    wannier-initial-state totalE.$VAR
    wannier-dump-name wannier.$VAR
    
    wannier-center  0.125 0.125 0.125  2.
    wannier-center  0.625 0.125 0.125  2.
    wannier-center  0.125 0.625 0.125  2.
    wannier-center  0.125 0.125 0.625  2.

This includes all the commands from the total energy calculation input file,
and then adds commands specifying parameters for MLWF construction.
The \ref CommandWannier command controls global options for the %Wannier module,
and here we specify that we want real-space wave function output
(disabled by default since these files can be large!).
Next, the \ref CommandWannierInitialState and \ref CommandWannierDumpName commands
specify which total-energy calculation %Wannier should read the state from,
and the file-name pattern for %Wannier-specific outputs, respectively.
Note that %Wannier requires that the input total-energy calculation
have at least State and BandEigs output.

Finally, the four \ref CommandWannierCenter commands indicate
the initial guesses ("trial orbitals") for constructing four MLWFs.
The invocation above corresponds to hydrogenic s orbitals of width
2 bohrs, centered at the specified lattice coodinates: here we chose
the centers of bonds from one Si atom to its nearest neighbours.
There are many other options for trial orbitals, including atomic orbitals
and arbitrary linear combinations of hydrogenic orbitals and atomic orbitals;
see the \ref CommandWannierCenter command documentation for details.
By default, with four wannier-center's specified, the code will
construct MLWFs from the four lowest bands in the system;
this can be changed using the \ref CommandWannier command,
as we will demonstrate in the [next tutorial](EntangledBands.html).

Now, generate the wannier functions using:

    mpirun -n 4 wannier -i wannier.in | tee wannier.out

Note that we are not using the jdftx executable here, but instead
"wannier", which is also built in the same directory as jdftx.

Examine the output file wannier.out.
The overall structure is very similar to jdftx output files.
The initialization section contains the usual parts followed by %Wannier-specific parts.
After initialization, we find WannierMinimize lines which are optimizing
a quantity called Omega (analagous to ElecMinimize optimizing Etot or F).
This Omega, called the spread function, is the sum of variances of the
%Wannier functions, and minimizing it results in MLWFs.
At the end, the code reports the converged centers and spreads for each
of the four MLWFs, and ends with %Wannier-specific outputs.

By default, the code dumps "mlwfU" which are the optimized unitary rotations
at each k-point, "mlwfH" which is the Hamiltonian in the MLWF basis, and
"mlwfBandContrib" specifying the ranges of bands and energies covered by each MLWF.
Additionally, during initialization, the code dumpes "mlwfBandRanges"
which specifies the minimum and maximum energies of each band,
which we will find useful in the [next tutorial](EntangledBands.html).
Finally, since we asked for it, we also got real-space MLWF output
in four files "0.mlwf", "1.mlwf" etc.

*/
