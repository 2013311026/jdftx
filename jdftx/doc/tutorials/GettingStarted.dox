/** \page GettingStarted Getting started

Getting started
---------------

Now that you have a shiny new jdftx executable (and optionally jdftx_gpu) in the directory \<path-to-JDFTx\>/build, you might want to add [bash aliases](http://tldp.org/LDP/abs/html/aliases.html) for them, or add the directory \<path-to-JDFTx\>/build to your [path](http://www.linuxheadquarters.com/howto/basic/path.shtml).

The command-line usage information can be retrieved using **jdftx -h**. Note that all command-line arguments follow the standard unix long/short option conventions. The typical usage of this program would be of the form:

     jdftx -i input.in -o output.out

The input file contains commands that setup and control the calculation; the progress of the calculation is logged to the output file. The list of available input file commands with a brief yet complete documentation is obtained by running **jdftx -t**.


A first calculation
-------------------

A lot of effort in the research behind JDFTx has involved water: its dielectric response, equation of state, free energy functional etc. Therefore, a water molecule is a fitting first calculation: save the following to water.in:

    # The input file is a list of commands, one per line
    # The commands may appear in any order; group them to your liking
    # Everything on a line after a # is treated as a comment and ignored
    # Whitespace separates words; extra whitespace is ignored
    # --------------- Water molecule example ----------------

    # Set up the unit cell - each column is a bravais lattice vector in bohrs
    # Hence this is a cubic box of side 10 bohr (Note that \ continues lines)
    lattice \
        10 0  0 \
        0  10 0 \
        0  0  10

    # Specify the pseudopotentials (this defines species O and H):
    ion-species <path-to-O-pseudopotential>/O.fhi
    ion-species <path-to-H-pseudopotential>/H.fhi

    # Specify coordinate system and atom positions:
    coords-type cartesian  #the other option is lattice (suitable for solids)
    ion O   0.00 0.00  0.00  0  # The last 0 holds this atom fixed
    ion H   0.00 1.13 +1.45  1  # while the 1 allows this one to move
    ion H   0.00 1.13 -1.45  1  # during ionic minimization

    dump-name water.$VAR  #Filename pattern for outputs
    dump End Ecomponents  #Output energy components at the end

Note that you can get Abinit FHI format pseudopotentials from the [Opium website](http://opium.sourceforge.net).
Ultrasoft pseudopotentials (*.uspp files) generated by [USPP](http://www.physics.rutgers.edu/~dhv/uspp) are also supported (although not tested as much, yet).
These USPP pseudopotentials are also bundled with the code, in the build directory.
Additionally, if you are using a specific group of pseudopotentials,
you can specify that group instead of listing the individual species.
For instance, to utilize pbe pseudopotentials from the GBRV set that comes with JDFTx, use the two commands:

    ion-species GBRV/$ID_pbe_v2.uspp
    ion-species GBRV/$ID_pbe_v1.uspp

For the example given, these commands will search for O_pbe_v2.uspp and H_pbe_v2.uspp, and if those files aren't found, then O_pbe_v1.uspp and/or H_pbe_v1.uspp.

Now, that basic input file can be run with

    jdftx -i water.in -o water.out

That should complete in a few seconds and create files water.out and water.Ecomponents. Have a look at water.out. It lists the commands that were issued in the input file along with several more which have sensible defaults (along with the output of jdftx -t, this should tell you all you need to go further).

That is followed by initialization of the plane-wave grid, symmetries, pseudopotentials etc., and then the electronic minimization which logs the progress of the conjugate gradients minimizer. The default is to minimize for 100 iterations or the round-off error limit, whichever comes first. This example converges to double precision (16 digits) in around 40 iterations. Note that the ions have not been moved and the end of the output file lists the forces at the initial position. The output water.Ecomponents lists the break-up of the final minimized energy.

Electronic minimization is a good first step, but you probably want to optimize the geometry of the water molecule.  To turn on ionic minimization, add something similar to the following lines to your water.in:

    #Ionic minimization:
    ionic-minimize \
        nIterations 10 \
        energyDiffThreshold 1e-6 \
        knormThreshold 1e-4  #Threshold on RMS cartesian force

Now, rerun jdftx.  The default behavior of jdftx is to concatenate output files- if you wish to overwrite your previous water.out file, then run jdftx with the option of -d.  To see other options for jdftx, run jdftx --help. 

Once your new water calculation has finished, you can visualize the ionic minimize steps.  To do this, locate the "scripts" directory of JDFTx, and look inside.  This directory contains tools for postprocessing, for example.  createXSF is one such script- this creates an XcrySDen structure file from JDFTx output, which can be viewed in a visualization program such as VESTA or XcrySDen.  

Run:
[path to scripts]/createXSF water.out water.axsf Animated

Now open XcrySDen, for instance, and open the water.axsf.  You should be able to click through a number of slides corresponding to the geometry optimization steps.  To visualize the water molecule as a molecule, rather than at the corners of the box, change the unit of repetition (Display -> Unit of Repetition -> Translational asymmetric unit)  


Look through the beginning of the output file for various defaults that you might want to tweak next. Here follow some of the most likely candidates:

    elec-ex-corr hyb-PBE0  # Why not mix in exact exchange? (gga-PBE by default)
    elec-cutoff 30.0      # Plane-wave cutoff in Hartrees (20 by default)
    wavefunction LCAO     # Initialize state from atomic orbitals (random by default)

    #Customize electronic minimization:
    electronic-minimize \
        nIterations 50 \
        energyDiffThreshold 1e-8  # who needs 16 digits?

    dump End State            # Output wavefunctions etc. at end of run
    dump-name water.$VAR      # with filenames water.wfns etc
    initial-state water.$VAR  # and perhaps use them to start the next run

Look through the output of **jdftx -t** for the complete list of commands and all their options and defaults!
*/
